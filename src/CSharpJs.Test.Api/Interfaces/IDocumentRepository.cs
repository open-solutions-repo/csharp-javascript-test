using System;
using System.Collections.Generic;
using Xnet.Store5.Api.Domain;
using Xnet.Store5.Api.Domain.ValueTypes;
using Xnet.Store5.Api.Model;

namespace Xnet.Store5.Api.Interfaces
{
    public interface IDocumentRepository
    {
        void SetCompany(string company);
        IEnumerable<dynamic> GetBusinessPartners(string code, string cardType);
        IEnumerable<dynamic> GetItems(string code);
        string Company { get; }
        List<ResGroupReportModel> CreateReportUsingFilter(ReportFilter filter);
        ResourceEntry GetResourceToGoodsIssueIfOpenClose(string ppEntry);
        ResourceEntry GetResourceToGoodsIssue(string ppEntry);
        IEnumerable<OP> GetOPs();
        OP GetOP(int docEntry);
        bool GetMaterialIssueSuggest();
        dynamic GetWarehouseUsingItem(string itemCode);
        object GetAllFormats();
        object CloseRuleIsNotOpen(int docEntry, string status, string funcionario);
        object GetAllMaskProductionOrders();
        bool OpenRuleIsNotConclude(int docEntry);
        object GetMaskProductionOrders(string code);
        object GetAllOPListByStatus();
        object LastStatusAppointmentRules(int docEntry, string status, string funcionario);
        bool ExistResourceGroupInTimeEntryParameter(string resourceGroupDesc);
        bool ExistAccountInGGF(string code);
        object FindFormat(string code);
        int StatusPP(string docEntry, string status, string funcionario);
        int GetNextNumberRnc(RncModel rncModel);
        int StatusPP(string docEntry, string status);
        void CheckPP(string docEntry, string status, string funcionario);
        int AnyPurchaseRequestInOutsourcingLine(string orderType, int orderEntry, int lineId);
        object FindCostCenter(string code);
        bool ExistAccount(string code);
        object FindAccount(string code);

        GgfMD FindAccountById(string code);
        int GetDocNumPurchaseRequestByDocEntry(int purchaseEntry);
        object GetAllItems(string code);
        IEnumerable<GgfMD> GetAllAccounts();

        List<MonitorGGF> ListOfCostsPerOrderGGF(Filter filter);
        object GetCurrencys();
        List<MonitorGGF> LoadResourceGroupsGGF(Filter filter);
        List<dynamic> TotalOfAccountByPeriod(Filter filter);
        int? GetBplIdByWhsCode(string warehouse);
        List<dynamic> TotalOfAccountGroupedByResource(Filter filter);
        List<ProfitCenter> LoadAllProfitCenter();
        bool IsPrintTicket(string groupRessource);
        IEnumerable<Companys> GetCompany();
        //Pricing GetPricing(int docEntry);
        IEnumerable<InstrumentsGroup> GetInstrumentsGroup();
        object GetAllStatusrnc();
        object GetSalesman(string code);
        object GetAllTypernc();
        ValidationOS ValidationOS(int codePP);
        bool ConcludeOS(int docEntry);
        ScreenConfiguration GetScreenConfigurationy();
        object GetAllDispositionrnc();
        object GetAllDestinyrnc();
        object GetAllFamilyrnc();
        object GetAllPhasernc();
        object SuggestFormat(string code);
        object GetBranch();
        Gauging FindGauging(int code);
        IEnumerable<Gauging> GetAllGauging();
        object GetAllAccountrnc();
        IEnumerable<InstrumentsGroup> GetAllInstrumentsGroup();
        ProductionOrderItem GetMaterial(string itemCode);
        List<dynamic> CheckLastPP(int v, string worType);
        object FindInstrumentsGroup(string code);
        Pricing GetPricing(int docEntry);
        IEnumerable<Pricing> GetPricings();
        object FindStatusrnc(string code);
        IEnumerable<InstrumentLocal> GetAllInstrumentsLocal();
        object FindTypernc(string code);
        object FindDispositionrnc(string code);
        object GetAllProductEntry();
        object GetAllReasonForStopping();
        object FindDestinyrnc(string code);
        object GetFixedExpensesAndGrossRevenueModel(string code);
        object FindFamilyrnc(string code);
        IEnumerable<GoodsIssue> GetAllGoodsIssue();
        object FindPhasernc(string code);
        GoodsIssue GetIssueById(string codigo);
        IEnumerable<GoodsEntry> GetAllGoodsEntry();
        int GetDecimalQuantityofSap();
        IEnumerable<GoodsEntry> GetEntryById(string codigo);
        object GetUsagesToConfiguration();
        object FindAccountrnc(string code);
        object GetProductEntryById(int code);
        object GetOSFinish(string cardCode);
        object GetProcessList(string code);
        object GetAllInspectionEntry();
        object GetFixedExpensesAndGrossRevenueSumGrp(string code, string absId);
        object FindInstrumentsLocal(string code);
        IEnumerable<TimeEntryParameter> GetAllTimeEntryParameter();
        IEnumerable<QuotaTypes> GetAllQuotaTypes();
        IEnumerable<Client> GetClient();
        object GetAllMaskServiceOrders(string type);
        object GetMaskServiceOrders(string code);
        object GetAllOrderTypes();
        dynamic GetConfigTimeEntry();
        object GetProcessListInspection(string code);
        object FindProductionOrder(int code);
        object GetUsage(string key, string cardCode, string itemCode);
        IEnumerable<WorkingOrderType> GetOrderTypes();
        object GetParametersList(string code);
        //object GetAllSugest();
        IEnumerable<RoutingMask> GetAllIRoutingMask();
        object FindQuotaTypes(string code);
        IEnumerable<Resources> GetResourcesByGrpName(string code);
        object FindReasonForStopping(string code);
        TimeEntryParameter FindTimeEntryParameter(string code);
        IEnumerable<InspectionMasks> GetAllInspectionMaskCAD();
        bool CanCloseRequest(int purchaseEntry, int lineId);
        IEnumerable<RNC> GetAllRNC();
        RNC GetRncById(string code);
        object GetMaterialOrder(string key, string order);
        IEnumerable<ValueAndType> GetGGFByPeriod(Filter filter);
        IEnumerable<dynamic> GetGGFByPeriodWithProfitCode(Filter filter);
        IEnumerable<dynamic> GetEmployee();
        object GetItemsGroup(string code);
        IEnumerable<Instruments> GetAllInstruments();
        object FindInstruments(string code);
        IEnumerable<Item> GetAllItemsStock();
        object GetAllListByStatus();
        IEnumerable<InspectionMasks> GetAllInspectionMask();
        object GetProductProcess(int code);
        object FindOrderTypes(string code);
        IEnumerable<TimeEntryCustomFields> GetAllCustomFields();
        object GetDetailOPByGGF(DateTime dateFrom, DateTime dateTo);
        object GetServiceGroup(string code);
        object GetClient(string code);
        InstrumentsGroup GetInstrumentsGroupId(string code);
        object GetAllItemsStockOS(string code, string inventoryItem);
        object GetExpense(string code);
        object SuggestInstruments(Param param);
        IEnumerable<dynamic> GetBatchSerie(string itemCode, string whsCode);
        object GetAllItemsStock(string code);
        QuotaTypes GetQuotaTypeId(string code);
        object GetProcessListEntry(string code);
        object GetSugestRoutingMask(string code);
        IEnumerable<ProductionOrder> GetAllProductionOrder();
        object FindOs(string code);
        bool ExistsQuotaInOS(string code);
        object GetSuggestTaxCode(string code);
        object SuggestAccountrnc(string code);
        object GetOrder(string key, string suggest);
        object GetSugestMaskServiceOrders(string code, string ordem);
        InspectionMasks FindInspectionMask(string code);
        object GetAllNfEntry();
        IEnumerable<Inspection> GetAllInspection();
        object FindInspection(string code);
        IEnumerable<RoutingMask> GetAllRoutingMask();
        object GetAllOutsourcing();
        object GetSuggestTaxAttributes(string code);
        object FindRoutingMask(string code);
        object Findfamilyrnc(string code);
        IEnumerable<Warehouse> GetWarehouse(string code);
        object SuggestPhasernc(string code);
        string GetRepoImageSap();
        Attachments GetAttachments(int entry);
        object FindCustomFields(string code);
        IEnumerable<TimeEntry> GetAllTimeEntry();
        object FindTimeEntry(string code);

        IEnumerable<ProductionOrder> GetProductionOrders();
        object GetSuggestPaymentsTerms(string code);
        object FindResourceType(string code);
        object LoadResourceToReport();

        IEnumerable<ServiceOrder> GetServiceOrders();
        ServiceOrder GetServiceOrder(int docEntry);
        object SearchInstrumentsLocal(string code);
        IEnumerable<ResourceGroups> GetResourceGroup();
        IEnumerable<Item> GetOutsource(string code);
        IEnumerable<Resources> GetResources(string code);
        object SugestOrderType(string code);
        IEnumerable<Provider> GetAllProvider(string code);
        IEnumerable<Inspector> GetAllInspector();
        IEnumerable<CustomField> GetAllCustomField();
        IEnumerable<CustomField> GetCustomFieldFromObject(FieldObject obj);
        CustomField GetCustomField(FieldObject obj, string Name);
        object FindSupplier(string code);
        object GetResourceGroup(string code);
        object GetOutsourceService(string code);
        object GetEmployee(string code);
        object GetAllQuotaTypes(string code);
        object GetAllInstrumentsGroup(string code);
        object GetNextNumberRevisionRouting(string v, string revision);
        object GetNextNumberRevisionInspection(string v, string visualCode);
        object SuggestFamilyrnc(string code);
        object IsFirstAcess(string user);
        IEnumerable<ServiceOrder> GetSalesorder(string item, string cardCode);
        object GetAllInspector(string code);
        object GetAllInspectionMaskLink();
        object GetInspectionMaskLink(string id);
        object GetSugestProductStructures(string code, int version);
        object GetQuantityTimeEntry(string[] pp);
        object GetDimensional(string id);
        object FindPlants(string code);
        object FindNFentry(string code);
        object SuggestDestinyrnc(string code);
        object SuggestDispositionrnc(string code);
        object SuggestTypernc(string code);
        object SuggestStatusrnc(string code);
        string FindSerie(string code);
        dynamic GetRoutingOperation(string routingCode);
        dynamic GetConfigByName(string name);
        IEnumerable<dynamic> GetOrderSeries(string order);
        dynamic GetConfiguration();
        int GetOrderStatus(string orderType, int orderNum);
        int GetWor4Entry(int entryOp);
        IEnumerable<dynamic> GetPrchseOrdersForSendTo3(string orderType, string orderFrom, string orderTo, string cardFrom, string cardTo, DateTime dateFrom, DateTime dateTo);
        IEnumerable<dynamic> GetItemsForSendTo3(IEnumerable<SelectedPrchseOrderLine> selected);
        object GetPPs(string worEntry, string worType);
        string GetClientByServiceOrder(string code);
        Contract SearchContractGuardRain(string CardCode, string ItemCode);
    }
}